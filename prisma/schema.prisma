// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Couple {
  id              String   @id @default(cuid())
  partner_a_name  String
  partner_b_name  String
  anniversary_date DateTime?
  city            String   @default("Hyderabad")
  children        Json     @default("[]")
  premium_until   DateTime?
  encryption_key  String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  // Relationships
  sync_entries     SyncEntry[]
  tasks            Task[]
  ritual_sessions  RitualSession[]
  rasa_balance     RasaBalance[]
  children_profiles Child[]
  reward_transactions RewardTransaction[]
  memories         Memory[]
  meal_plans       MealPlan[]
  grocery_lists    GroceryList[]

  @@map("couples")
}

model SyncEntry {
  id           String   @id @default(cuid())
  couple_id    String
  partner      String   // 'partner_a' or 'partner_b'
  mood_score   Int      // 1-5 scale
  energy_level Int      // 1-10 scale
  mood_tags    Json     @default("[]") // Array of mood tags
  context_notes String?
  created_at   DateTime @default(now())

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)

  @@map("sync_entries")
}

model Task {
  id             String      @id @default(cuid())
  couple_id      String
  title          String
  description    String?
  assigned_to    String      // 'partner_a', 'partner_b', or 'both'
  status         TaskStatus  @default(PENDING)
  category       TaskCategory
  ai_reasoning   Json?
  due_at         DateTime?
  completed_at   DateTime?
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model RitualSession {
  id               String        @id @default(cuid())
  couple_id        String
  ritual_type      RitualType
  archetype        Archetype
  duration_minutes Int
  completion_data  Json?
  started_at       DateTime      @default(now())
  completed_at     DateTime?

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)

  @@map("ritual_sessions")
}

model RasaBalance {
  id               String   @id @default(cuid())
  couple_id        String
  play_percentage  Float
  duty_percentage  Float
  balance_percentage Float
  updated_at       DateTime @default(now())

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)

  @@unique([couple_id])
  @@map("rasa_balance")
}

model Child {
  id           String   @id @default(cuid())
  couple_id    String
  name         String
  age          Int
  preferences  Json     @default("[]")
  created_at   DateTime @default(now())

  couple       Couple           @relation(fields: [couple_id], references: [id], onDelete: Cascade)
  activities   FamilyActivity[]

  @@map("children")
}

model FamilyActivity {
  id              String        @id @default(cuid())
  child_id        String
  activity_type   String
  completion_data Json?
  completed_at    DateTime?
  created_at      DateTime      @default(now())

  child Child @relation(fields: [child_id], references: [id], onDelete: Cascade)

  @@map("family_activities")
}

model RewardTransaction {
  id          String   @id @default(cuid())
  couple_id   String
  coins_earned Int
  coins_spent Int      @default(0)
  activity    String   // Description of activity
  created_at  DateTime @default(now())

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)

  @@map("reward_transactions")
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskCategory {
  DAILY
  WEEKLY
  MONTHLY
  SEASONAL
}

enum RitualType {
  DAILY_SYNC
  FAIRNESS_RESET
  CONNECTION_RITUAL
  PLAY_ACTIVITY
  BALANCE_PRACTICE
}

enum Archetype {
  RADHA_KRISHNA
  SITA_RAM
  SHIVA_SHAKTI
}

model Memory {
  id          String   @id @default(cuid())
  couple_id   String
  type        String   // 'text', 'audio', 'video', 'image'
  content     String   // URL for media, text content for text memories
  title       String
  description String?
  date        DateTime @default(now())
  tags        Json     @default("[]") // JSON array of tags
  sentiment   String   // 'positive', 'neutral', 'negative'
  partners    Json     @default("[]") // JSON array of partner IDs who contributed
  is_private  Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)

  @@map("memories")
}

model Recipe {
  id           String   @id @default(cuid())
  name         String
  description  String?
  ingredients  Json     // JSON array of ingredients
  instructions String
  prep_time    Int      // in minutes
  cook_time    Int      // in minutes
  servings     Int
  difficulty   String   // 'easy', 'medium', 'hard'
  cuisine      String   // 'indian', 'italian', 'chinese', etc.
  tags         Json     @default("[]") // JSON array of tags
  nutrition    Json     // JSON nutrition info
  is_favorite  Boolean  @default(false)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  @@map("recipes")
}

model MealPlan {
  id          String   @id @default(cuid())
  couple_id   String
  name        String
  date        DateTime
  meals       Json     // JSON meal structure with breakfast, lunch, dinner, snacks
  nutrition   Json     // JSON nutrition info
  budget      Float
  actual_cost Float?
  notes       String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)

  @@map("meal_plans")
}

model GroceryList {
  id          String   @id @default(cuid())
  couple_id   String
  name        String
  items       Json     // JSON array of grocery items
  total_budget Float
  actual_cost Float?
  assigned_to  String   // User ID
  status      String   // 'pending', 'shopping', 'completed'
  due_date    DateTime?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  couple Couple @relation(fields: [couple_id], references: [id], onDelete: Cascade)

  @@map("grocery_lists")
}